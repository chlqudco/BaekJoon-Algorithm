*** 정렬

ORDER BY 이름 DESC  -> 이름을 기준으로 내림차순



*** 조건 달기

WHERE 이름 = "조건"  -> 이름 항목이 조건인 부분만 추출
WHERE 이름 IS NOT NULL -> 널이 아닌 것만 반환
SELECT IFNULL(FREEZER_YN, 'N') AS FREEZER_YN  ->  널 인경우 두번째 요소 출력
CASE WHEN '조건' THEN '결과1' ELSE '결과2' END -> 조건이 True면 결과1, False면 결과2
WHERE PRICE = (SELECT MAX(PRICE) FROM FOOD_PRODUCT) -> 제일 비싼 가격의 상품 출력하기
SELECT if(NAME like '%AA%' or NAME like '%BB%' , 'O','X') as 중성화 -> if문을 사용해 문자열 파악 

*** 원하는 개수 출력

LIMIT 숫자 -> 숫자 만큼만 출력
SELECT COUNT(*) as COUNT
GROUP BY NAME
HAVING COUNT >= 2 -> NAME속성으로 묶고 그 개수가 2개 이상인 것만 카운트


*** 이름 바꾸기
SELECT 이름 AS 바꿀이름 -> 바꿀이름으로 출력



*** 개수 세기
SELECT COUNT(이름) AS 이름 -> 이름 항목의 개수 세기
SELECT COUNT(DISTINCT 이름) -> 중복을 제거하여 이름 세기



*** 최대값 구하기
SELECT max(이름) as MAX_PRICE  ->  이름 값 중 최대값 구하기, 가장 최근의 날짜를 구할 수도 있음



*** 중복 제거
DISTINCT



*** 부분 일치
WHERE ADDRESS LIKE '강원도%'  ->  ADDRESS 값이 강원도로 시작하는 요소 찾기
WHERE AGE BETWEEN 20 AND 29  -> 20대 사람만 구하기
WHERE options LIKE '%네비게이션%'  ->  문장?에 네비게이션 있는 요소 반환
WHERE UPPER(NAME) LIKE '%EL%' -> NAME의 대소문자를 신경쓰지 않고 EL들어가는거 찾기


*** 특정 값 보유 여부
IN / NOT IN
WHERE MCDP_CD IN ('CS', 'GS')  ->  MCDP_CD가 CS나 GS인 경우만 출력
WHERE MCDP_CD = "CS" OR MCDP_CD = "GS"  ->  위와 동일 문법



*** 수학 연산
CEIL, FLOOR, ROUND : 올림, 버림, 반올림
SELECT ROUND(AVG(DAILY_FEE)) AS AVERAGE_FEE : 요금의 평균을 첫째 자리에서 반올림



*** 날짜 관련
SELECT DATE_FORMAT(HIRE_YMD, "%Y-%m-%d") AS 이름  ->  포맷 맞춰서 날짜 출력
WHERE YEAR(이름) = "2021"  -> 이름 항목이 2021년도인 항목만 취함
DATEDIFF(끝날짜, 시작날짜) +1 >= 30 -> 두 날짜의 차이가 30일 이상인 경우
WHERE CREATED_DATE = "2022-10-05" -> 저 날짜만 골라모음




*** 테이블 연결
FROM FIRST_HALF A , ICECREAM_INFO B WHERE A.FLAVOR = B.FLAVOR  -> A랑 B를 맛으로 연결



*** 없는 행 만들기
SELECT CASE WHEN DATEDIFF(end_date, start_date)+1 >= 30 THEN '장기 대여' ELSE '단기 대여' END AS RENT_TYPE  -> 날짜 차이가 30일 이상인 경우 장기대여, 아니면 단기대여 출력, 행 이름은 RENT_TYPE


*** 그룹으로 묶기
GROUP BY NAME -> NAME 속성이 같은 값끼리 서로 묶음
GROUP BY USER_ID, PRODUCT_ID HAVING COUNT(USER_ID) >= 2 -> 2개의 속성을 묶고 묶인 개수가 2개 이상인것 출력

*** 문자열 관련
SELECT SUBSTR(NAME, 1, 2) AS CATEGORY -> NAME에서 1부터 2개의 값만 추출






