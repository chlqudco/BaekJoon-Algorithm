- 2차원 배열
lateinit var dist: Array<IntArray>
dist = Array(n) { IntArray(m) }

val A = Array(101) { IntArray(101) { 초기값 넣고 싶으면 지정 } }

- 배열 선언하고 인덱스 값으로 초기화
val basket = IntArray(101) { it }


// dfs bfs 재료
val graph = Array(1001) { mutableListOf<Int>() }

val visited = BooleanArray(1001)
visited.fill(false)

val dx = intArrayOf(1, -1, 0, 0)
val dy = intArrayOf(0, 0, 1, -1)

val que = mutableListOf<Int>()
val cur = que.removeFirst()

//

var N: Int = 0
var M: Int = 0
val basket = IntArray(101) { it }

fun insertAndInit(){

    val line = readln().split(" ").map { it.toInt() }
    N = line[0]
    M = line[1]
}

fun calculate(){

    repeat(M) {
        val (i, j) = readln().split(" ").map { it.toInt() }
        basket.reverse(i, j + 1)
    }

    repeat(N) {
        print("${basket[it + 1]} ")
    }
}

fun main() = with(System.`in`.bufferedReader()) {

    insertAndInit()

    calculate()

}

//

다익스트라

import java.util.PriorityQueue

var V = 0
var E = 0
var K = 0

// 다익스트라
const val INF = 987654321
val graph = Array(20001) { mutableListOf<Node>() }
val cost = IntArray(20001) { INF }

data class Node(
    val idx: Int,
    val weight: Int
)

fun insertAndInit() {

    val input = readln().split(" ").map { it.toInt() }
    V = input[0]; E = input[1]
    K = readln().toInt()

    // 간선 입력
    repeat(E) {
        val (u, v, w) = readln().split(" ").map { it.toInt() }
        graph[u].add(Node(v, w))
    }

    cost[K] = 0
}

fun dijkstra() {

    // 우선순위 큐
    val pq = PriorityQueue<Node> { a, b -> a.weight - b.weight }

    // 자기 자신은 거리 0
    pq.add(Node(K, 0))

    // 큐가 빌때까지
    while (!pq.isEmpty()) {

        // 무게가 제일 작은 노드 하나 꺼내기
        val curNode = pq.remove()

        // 현재 뽑은 거리가 최단경로가 아니면 다음 간선 보기
        if (curNode.weight > cost[curNode.idx]) continue

        // 현재 노드에 연결된 선분을 조회하며
        graph[curNode.idx].forEach { value ->

            // 최단경로면 갱신
            if (cost[value.idx] > curNode.weight + value.weight) {
                cost[value.idx] = curNode.weight + value.weight
                pq.add(Node(value.idx, curNode.weight + value.weight))
            }
        }
    }

}

//

플로이드 워셔

// 인접 행렬
val graph = Array(101) { IntArray(101) { 987654321 } }

초기화 할때 graph에 간선의 젤 작은 값 넣기

    // 플로이드 워셔
    repeat(N) { i ->
        repeat(N) { j ->
            repeat(N) { k ->
                graph[j][k] = min(graph[j][k], graph[j][i] + graph[i][k])
            }
        }
    }


var aNum = 0
var bNum = 0

lateinit var A : MutableSet<Int>
lateinit var B : MutableSet<Int>

fun insertAndInit() {
    val input = readln().split(" ").map { it.toInt() }
    aNum = input[0]; bNum = input[1]

    A = mutableSetOf()
    A.addAll(readln().split(" ").map { it.toInt() })

    B = mutableSetOf()
    B.addAll(readln().split(" ").map { it.toInt() })
}

fun calculate() {
    print(A.subtract(B).size + B.subtract(A).size)
}

fun main() = with(System.`in`.bufferedReader()) {

    insertAndInit()

    calculate()
}


================================================================================================

입력
fun main() = with(System.`in`.bufferedReader()) {
	// 정수 하나 읽기
	val num = readLine().toInt()
    
	// 공백 기준으로 읽기
	val nums = readLine().split(" ").map { it.toInt() }
    
	// 문자열 을 char 배열로 받기
	val char = readLine().toCharArray
}

================================================================================================

입출력
// 자바의 BufferedReader, InputStreamReader 이용
fun main(args: Array<String>) = with(BufferedReader(InputStreamReader(System.`in`))){

    val str = readLine() // 한줄 입력받기 (String)
    println(str) // 출력
    
    // 1 2 3 으로 들어온 입력 한번에 Type 바꿔 할당하기
    val (a,b,c) = readLine().split(" ").map { it.toInt() }
}


================================================================================================


문자열 처리
fun main() {
    var str = "abcd"
    var str2 = "123"

    str.length // 문자열의 길이
    str[1] // 문자열의 특정 위치 접근
    str2.toInt() // 문자열 타입 변환 to'Type'()

    str.isEmpty() // 문자열 길이가 0이면 true, 아니면 false
    str.isBlank() // 문자열 길이가 0이거나 공백으로만 이루어져 있다면 true, 아니면 false
    str.contains("a") // 문자열에 a가 포함되어 있으면 true, 아니면 false
    str.compareTo("abd") // 문자열 사전순 비교, str 이 앞이면 -1, 같으면 0, 뒤면 1

    str.split(" ") // 공백으로 구분하여 List<String> 반환
    str.substring(2,4) // 2 ~ 3 위치 문자열 반환 (마지막 범위 포함 X)
    str.substring(1) // 1부터 끝까지 문자열 반환

    str.trim() // 문자열 앞 뒤 공백 제거 (문자열 사이 공백 제거 X) 결과 반환
    str.lowercase() // 대문자 => 소문자 결과 반환
    str.uppercase() // 소문자 => 대문자 결과 반환
    str.replace("a","b") // 문자열 "a"를 전부 "b"로 바꾼 결과 반환
    str.reversed() // 문자열 뒤집은 결과 반환

    str += "ef" // 문자열 추가
}


================================================================================================

😀 StringBuilder 관련 메소드
코틀린에서 문자열을 합치기 위하여 자바의 StringBulider를 사용할 수 있다.
문자열을 단순히 '+' 연산을 실행하면 아예 새로운 문자열을 생성하기 때문에 효율이 떨어진다.
하지만 StringBulider는 문자열을 더하는 효율적인 방식으로 작동한다.

fun main() {
    val sb = StringBuilder()

    sb.append("abc") // 문자열 추가
    sb.insert(2,"ef") // 2 위치에 문자열 ef 삽입

    sb.delete(0, 2) // 0 ~ 1 범위의 문자열 삭제 (마지막 범위 포함 X)
    sb.deleteCharAt(1) // 1 위치의 문자 삭제
    
    sb.setCharAt(1, 'g') // 1 위치의 문자 g로 변경
    sb.reverse() // 문자열 뒤집기
    
    sb.setLength(0) // 문자열 길이 0으로 조절 (기존보다 짧은 길이면 삭제)
    sb.setLength(5) // 문자열 길이 5으로 조절 (기존보다 긴 길이면 공백으로 채움)

    // 배열의 숫자를 하나의 문자열로 합침 (1 2 3 4)
    val arr = arrayOf(1,2,3,4)
    arr.forEach { sb.append(it).append(' ') }
}


================================================================================================

Array, List, Set, Map

fun main(){

    // 1. Array
    /* 배열은 사이즈가 할당되어 있다. */
    val arr1 = arrayOf(1,2,3) // 1,2,3을 담은 배열 생성
    val arr2 = Array(3){0} // 크기가 3이고 초기값이 0인 배열 생성
    val arr3 = emptyArray<Int>() // Int 타입의 빈 배열 생성
    arr1[0] = 7 // 0번째 값을 7로 바꾼다 (배열은 Mutable 타입이기 때문에 수정 가능)


    // 2. List
    /* 리스트는 순서를 가지고, 사이즈가 자동으로 정해지며 기본은 Immutable 타입 */
    val list1 = listOf(1,2,3) // 1,2,3을 담은 리스트 생성
    val list2 = List(3){0} // 크기가 3이고 초기값이 0인 리스트 생성
    val list3 = arrayListOf<Int>(1,2,3) // 1,2,3을 담은 arrayList 생성 (Mutable)
    // list1[0] = 1 --> 오류발생 (수정 불가능)
    list3[0] = 1 // 0번째 값을 1로 바꾼다 (arrayList 는 Mutable 타입)
    list3.add(10) // 다음 값으로 10을 추가


    // 3. Set
    /* 집합은 순서를 가지지 않고, 중복 불가능. 사이즈가 자동으로 정해지며 기본은 Immutable 타입 */
    val set1 = setOf(1,2,3) // 1,2,3을 담은 Set 생성 (수정 불가)
    val set2 = mutableSetOf(1,2,3) // 1,2,3을 담은 mutableSet 생성 (수정 가능)
    set2.remove(2) // 집합에서 2 삭제


    // 4. Map
    /* 요소를 키와 값의 쌍의 형태로 저장. 키는 중복 불가능. 사이즈 자동, 기본 Immutable */
    val map1 = mapOf(1 to "Kim", 2 to "Han") // 수정 불가능
    val map2 = mutableMapOf(1 to "Kim", 2 to "Han") // 수정 가능
    map2.size // 맵의 사이즈 반환
    map2.keys // 맵의 모든 키 반환
    map2.values // 맵의 모든 값 반환
    map2.isEmpty() // 맵이 비어있으면 true, 아니면 false
    map2.containsKey(1) // 1에 해당하는 키가 있으면 true, 아니면 false
    map2.containsValue("Kim") // Kim에 해당하는 값이 있다면 true, 아니면 false
    map2[1] // 키에 해당하는 값 반환, 없다면 null
    map2.getOrDefault(1, "2") // 키에 해당하는 값 반환, 없다면 "2" 반환
    map2.put(3, "Lee") // 3과 Lee의 쌍 추가
    map2.remove(1) // 1에 해당하는 요소 제거
    map2.clear() // 초기화
}


================================================================================================

Collection 관련 메소드

fun main(){
    val list = arrayListOf(1,2,3,4,5)

    list.forEach() { print("$it " )} // 컬렉션에 포함된 모든 요소 출력
    list.minOrNull() // 컬렉션 최솟값 반환
    list.maxOrNull() // 컬렉션 최댓값 반환

    list.first() // 첫 번째 요소 반환
    list.first { it > 3 } // 조건에 맞는 첫 번째 요소 반환
    list.last() // 마지막 요소 반환
    list.last{it < 3} // 조건에 맞는 마지막 요소 반환

    list.filter { it < 3 } // 조건에 맞는 요소 반환
    list.map { it+5  } // 수식을 적용하여 값 변경하여 반환
    list.count() { it < 3 } // 조건에 맞는 요소의 개수 반환
    list.any { it < 3 } // 조건에 하나라도 일치하는 요소가 있다면 true
    list.all { it < 3 } // 모든 요소가 조건에 맞다면 true
    list.none { it < 3 } // 조건에 하나도 맞지 않으면 true

    list.reduce { acc, i -> acc * i } // 내부의 데이터를 다 모아줌
    list.fold(10) { acc, i -> acc * i } // 내부의 데이터를 다 모아줌 (초기값 지정)

    list.sorted() // 컬렉션 정렬하여 반환
    list.sortedDescending() // 컬렉션 정렬하여 반환 (내림차순)
    list.sort() // 컬렉션 정렬 (Mutable 타입만 가능)

    list.sortedBy { it } // 특정 기준점으로 컬렉션 정렬하여 반환
    list.sortedByDescending { it } // 특정 기준점 기준 컬렉션 정렬하여 반환 (내림차순)
}



================================================================================================

큐(Queue), 스택(Stack), 우선순위 큐(PriorityQueue)

import java.util.*

fun main(){

    // 1. Queue
    var q : Queue<Int> = LinkedList() // 큐로 선언하고 LinkedList 로 할당
    q.add(1)    // 객체를 큐에 추가 (큐가 가득찬 상태이면 illegalStateException 발생)
    q.offer(3)  // 객체를 큐에 추가 (큐가 가득찬 상태이면 false 반환)

    q.element()    // 맨 앞 객체 리턴 (큐가 비어있는 상태이면 NoSuchElementException 발생)
    q.elementAt(1) // 인덱스 값의 객체 리턴
    q.peek()   // 맨 앞 객체 리턴 (큐가 비어있는 상태이면 null 반환)

    q.remove()  // 삭제하면서 객체 반환 (큐가 비어있는 상태이면 NoSuchElementException 발생)
    q.poll()  // 삭제하면서 객체 반환 (큐가 비어있는 상태이면 false 반환)

    q.size // 큐 사이즈
    q.isEmpty() // 비어있으면 true, 아니면 false


    // 2. Stack
    var s = Stack<Int>()

    s.push(1) // 객체를 스택에 추가
    s.peek() // 맨 위의 객체 반환 (비어 있는 상태이면 EmptyStackException 발생)
    s.pop() // 맨 위의 객체 삭제하고 반환 (비어 있는 상태이면 EmptyStackException 발생)
    s.isEmpty() //비어있으면 true, 아니면 false
    s.size // 스택 사이즈


    // 3. PriorityQueue
    val pq = PriorityQueue<Int>() // 오름차순
    val pq2 = PriorityQueue<Int>(Collections.reverseOrder()) // 내림차순

    val pq3 = PriorityQueue<Node>()
}

// index 기준 비교 (오름차순)
data class Node(
    val index : Int,
    val value : Int
) : Comparable<Node> {
    override fun compareTo(other: Node): Int = index - other.index
}


우선순위 큐 Data Class 정렬하기
ex) 인덱스 기준 오름차순

data class Node(
    val index : Int,
    val value : Int
) : Comparable<Node> {
    override fun compareTo(other: Node): Int = index - other.index

}

fun main(){
    val queue = PriorityQueue<Node>()

    queue.add(Node(0,5))
    queue.add(Node(2,3))
    queue.add(Node(1,100))

    println(queue.poll())
    println(queue.poll())
    println(queue.poll())
}


================================================================================================

코틀린 문자열 쪼개기

import java.lang.StringBuilder
import java.util.*

fun main(){
    val str = "a b c d"
    val st = StringTokenizer(str) // 문자열을 쪼갬, 미지정시 공백 기준

    // (" ")를 기준으로 문자열을 쪼갬
    val a = str.split(" ")

    println(a)
    println(a[0])

    // 처음부터 하나씩 문자열 지정
    println(st.nextToken().toString())
    println(st.nextToken().toString())


    println()


    val str2 = "a!b!c!d"
    val st2 = StringTokenizer(str2,"!") // "!"를 기준으로 문자열을 쪼갬

    // ("!")를 기준으로 문자열을 쪼갬
    val b = str2.split("!")

    println(b)
    println(b[0])

    // 처음부터 하나씩 문자열 지정
    println(st2.nextToken().toString())
    println(st2.nextToken().toString())
}



================================================================================================

StringBuilder 사용하여 문자열 합치기

import java.lang.StringBuilder
import java.util.*

fun main() = with(Scanner(System.`in`)){
    val sb = StringBuilder()

    sb.append("abc")
    sb.append("abc")
    println(sb) // abc,abc를 합친 문자열 출력

    sb.setLength(0) // sb에 저장된 값 삭제
    println(sb)

    val arr = arrayOf(1,2,3,4)
    arr.forEach { sb.append(it).append(' ') } // 배열의 숫자를 하나의 문자열로 합침
    println(sb)
}



================================================================================================

코틀린 배열 참조, 복사하기

val arr1 = arrayListOf(1)
    val arr2 = arr1 // 배열 참조
    arr2.add(2)
    
코틀린에서 배열을 복사하여 다른 배열을 생성하고자 할때, 위와 같이
새로운 배열 = 복사할 배열
형태로 선언하게 되면 C언어의 포인터처럼 주소값을 참조하게 되어
새로운 배열의 변경사항이 복사한 배열에도 적용된다.

val arr3 = arrayListOf(1)
    val arr4 = arrayListOf<Int>()
    arr4.addAll(arr3) // 배열 복사
    arr4.add(2)


================================================================================================

코틀린 Map value 기준 정렬하기

// 값이 작은 순 ( 오름차순 )
map = map.toList().sortedBy { it.second }.toMap() as MutableMap
    
// 값이 큰 순 ( 내림차순 )
map = map.toList().sortedByDescending { it.second }.toMap() as MutableMap



================================================================================================

문자열 뒤집기

StringBuffer(a).reverse().toString()


================================================================================================

컬렉션 (ArrayList 등..) 최대, 최솟값 구하기
import java.util.*

fun main(){
    val arr = arrayListOf<Int>(2,4,5,1)

    val max = Collections.max(arr)
    val min = Collections.min(arr)

    println("$max $min")
}


================================================================================================


변수 여러개 한번에 할당하기

fun main(){
    val (a,b,c) = arrayOf(1,2,3)

    println("$a $b $c")
}


================================================================================================

스트림 함수 활용하여 컬렉션 다루기

fun main(){
    val number = listOf(1,2,3)

    // 숫자를 제곱으로 변환하여 출력
    number.map { n -> n*n }.forEach { println(it) }
}


fun main(){
    val number = listOf(1,2,3)

    // 인덱스 값과 함께 출력
    number.mapIndexed { index, i ->
        println("$index 번째 수 : $i")
    }
}



fun main(){
    val number = listOf(1,2,3,4,5)

    // null 값을 무시
    number.mapNotNull { i -> if(i>3) i else null }
        .forEach { println(it) }
}



================================================================================================

컬렉션 내의 하나의 자료를 여러개의 인자로 바꾼다. 변환하여 iterator(컬렉션) 형태로 반환한다. 
fun main(){
    val number = listOf(1,2,3,4,5)

    // 각 인자가 1부터 인자까지의 수를 담은 iterator 가 됨
    number.flatMap { i -> 1..i }.forEach { print("$it ") }
}



================================================================================================


컬렉션 내의 자료들을 조건에 따라 분류하여 변환하여 map(key,value) 형태로 반환한다.
fun main(){
    val number = listOf(1,2,3,4,5)

    // 조건에 따라 분류해서 map 형태로 변환
    number.groupBy { i -> if (i>3) "4이상" else "3이하"}
        .forEach{println(it)}

    // key,value 값 사용 가능
    number.groupBy { i -> if (i>3) "4이상" else "3이하"}
        .forEach{ (key, i) -> println("Key : $key Value : $i") }
}



================================================================================================

컬렉션 내의 자료들을 조건에 맞춰서 걸러준다.
fun main(){
    val number = listOf(1,2,3,4,5)

    // 3을 초과하는 수만 출력
    number.filter { i -> i>3 }
        .forEach { println(it) }
}


================================================================================================


인자로 받은 개수만큼을 인자로 갖는 리스트를 반환한다.

fun main(){
    val number = listOf(1,2,3,4,5)

    // 앞에서부터 2개까지의 인자를 가지는 리스트 반환
    number.take(2)
        .forEach { println(it) }
    println()

    // 뒤에서부터 2개까지의 인자를 가지는 리스트 반환
    number.takeLast(2)
        .forEach { println(it) }
    println()

    // 앞에서부터 조건에 맞는 자료까지의 인자를 가지는 리스트 반환
    number.takeWhile { i -> i < 3 }
        .forEach { println(it) }
    println()

    // 뒤에서부터 조건에 맞는 자료까지의 인자를 가지는 리스트 반환
    number.takeLastWhile { i -> i > 3 }
        .forEach { println(it) }

}


================================================================================================


take의 반대의 역할을 하며, 그 개수만큼을 제외한 리스트를 반환한다.

fun main(){
    val number = listOf(1,2,3,4,5)

    // 앞에서부터 2개까지의 인자를 제외하고 가지는 리스트 반환
    number.drop(2)
        .forEach { println(it) }
    println()

    // 뒤에서부터 2개까지의 인자를 제외하고 가지는 리스트 반환
    number.dropLast(2)
        .forEach { println(it) }
    println()

    // 앞에서부터 조건에 맞는 자료까지의 인자를 제외하고 가지는 리스트 반환
    number.dropWhile { i -> i < 3 }
        .forEach { println(it) }
    println()

    // 뒤에서부터 조건에 맞는 자료까지의 인자를 제외하고 가지는 리스트 반환
    number.dropLastWhile { i -> i > 3 }
        .forEach { println(it) }

}


================================================================================================


각각 컬렉션의 첫번째, 마지막 자료를 반환한다.

fun main(){
    val number = listOf(1,2,3,4,5)

    // 첫번째 자료 반환
    println(number.first())
    // 조건에 맞는 첫번째 자료 반환, 없으면 예외
    println(number.first() {i -> i>3})
    // 조건에 맞는 첫번째 자료 반환, 없으면 Null
    println(number.firstOrNull() {i -> i>5})

    // 마지막 자료 반환
    println(number.last())
    // 조건에 맞는 마지막 자료 반환, 없으면 예외
   println(number.last() {i -> i>3})
    // 조건에 맞는 마지막 자료 반환, 없으면 Null
    println(number.lastOrNull() {i -> i>5})
}


================================================================================================


중복된 값을 제외하여 반환한다.

import kotlin.math.absoluteValue

fun main(){
    val number = listOf(-1,-2,1,2,3,4,5,1,2,3)

    // 중복된 자료 제외하고 반환
    number.distinct()
        .forEach { println(it) }
    println()

    // 중복 기준 지정 (절대값)
    number.distinctBy { i -> i.absoluteValue }
        .forEach { println(it) }
}



================================================================================================

두 컬렉션을 조합하여 새로운 컬렉션을 만들어준다.

fun main(){
    val name = listOf("KIM","CHOI","HAN","LEE")
    val age = listOf(24,30,36,20,1)

    // Pair 형태로 조합해줌. 리스트 인자의 갯수가 더 적은 쪽의 수를 따라감
    name.zip(age).forEach { println(it) }
    // Pair 가 아닌 다른 형태로도 반환 가능
    name.zip(age) { name,age -> "$name 는 $age 살입니다." }
        .forEach { println(it) }

}

================================================================================================


컬렉션을 문자열로 변환하여 한 문자열로 반환한다.

fun main(){
    val name = listOf("KIM","CHOI","HAN","LEE")
    
    // 문자열 형태로 변환하여 하나의 문자열로 합친다.
    println(name.joinToString())
    // 구분자 지정
    println(name.joinToString(" "))
    // 문자열의 형태 변환 가능
    println(name.joinToString { it -> "$it 입니다." })

}


================================================================================================


컬렉션 내의 자료를 다 합쳐준다.

fun main(){
    val number = listOf(1,2,3,4,5)

    // 수를 모두 합친다
    println(number.reduce{sum , i -> sum + i})

    // 수를 모두 합친다. (초기값 5)
    println(number.fold(5){sum, i -> sum + i})

}


================================================================================================


컬렉션에서 자료의 존재여부를 반환한다.

fun main(){
    val number = listOf(1,2,3,4,5)

    // 자료가 존재하면 true
    println(number.any())
    // 5를 넘는 자료가 존재하면 true
    println(number.any{i -> i>5})

    // 자료가 존재하지 않으면 true (any 의 반대)
    println(number.none())
    // 5를 넘는 자료가 존재하지 않으면 true
    println(number.none{i -> i>5})
}


fun main(){
    val number = listOf(1,2,3,4,5)

    // 최대값
    println(number.max())
    // 최소값
    println(number.min())
    // 평균값 (Double)
    println(number.average())
}



================================================================================================


코틀린에서는 배열에 또 다른 배열을 저장함으로써 2차원 배열을 구현한다.

var arr1 = Array<Array<Int>>(5){Array<Int>(4){i -> i+i } }
    var arr2 = Array<Array<Int>>(5){ arrayOf(1,2)}
    var arr3 = arrayOf(arrayOf(1,2,3), arrayOf(4,5,6))

    for(i in arr1){
        for(j in 0 until 4){
            print("${arr1[0][j]} ")
        }
        println()
    }
    println(arr1.contentDeepToString()) // 2차원 배열을 문자열로 출력해줌
    println(arr2.contentDeepToString()) // 2차원 배열을 문자열로 출력해줌
    println(arr3.contentDeepToString()) // 2차원 배열을 문자열로 출력해줌


var arr4 = Array(5){Array(5){Array(5){1} } }


================================================================================================


코틀린 Pair 로 변수 묶기
fun main(args:Array<String>){

    var a = Pair(1,"Han")
    println(a)
    a = a.copy(first=3) // first, second로 접근. val 이기 때문에 copy
    println(a)
}


================================================================================================


코틀린 in 의 다양한 사용법

fun main(args:Array<String>){
    var a = arrayOf(1,2,3,4)
    for(i in a) println(i)
    // ==
    for(i in a.indices) println(a[i])
}


fun main(args:Array<String>){
    var char = 'b'
    println(char in 'a'..'z') // a <= char <= z 이면 true

    var num = -1
    println(num in 0 .. 9) // 0 <= num <= 9 이면 true

    if(char in 'a' .. 'c'){
        println("안녕하세요.")
    } // 조건으로 사용

    when(num){
        in 0 .. 9 -> println("0~9 사이의 값입니다.")
        else -> println(num)
    } // 범위로 사용

    var set1 = setOf(2,4)
    println(3 in set1) // 컬렉션 안에 그 원소가 있는가?
    
}


================================================================================================


컬렉션 정렬하기 (sorted, sortedBy...)
data class Person(val name : String, val age : Int)

fun main(){
    var list = listOf(2,1,3,4)

    var list1 = list.reversed() // 순서 반대로
    var list2 = list.sorted() // 오름차순 정렬
    var list3 = list.sortedDescending() // 내림차순 정렬
    var list4 = list.shuffled() // 랜덤 정렬

    list1.forEach(){print("$it ")}
    println()
    list2.forEach(){print("$it ")}
    println()
    list3.forEach(){print("$it ")}
    println()
    list4.forEach(){print("$it ")}
    println()

    var personList = listOf(
        Person("Han",25),
        Person("Kim",19),
        Person("Lee",27),
        Person("Choi",25)
    )

    var personList1 = personList.sortedBy {it.age } // 조건부 오름차순 정렬
    var personList2 = personList.sortedByDescending {it.age } // 조건부 내림차순 정렬
    var personList3 = personList.sortedWith(compareBy({ it.age }, { it.name })) // 여러 조건으로 정렬
    // 클래스배열이 아닌 그냥 배열이면 it.first... 등으로 요소 접근

    personList1.forEach(){print("$it ")}
    println()
    personList2.forEach(){print("$it ")}
    println()
    personList3.forEach(){print("$it ")}
    println()

}


또한 조건에 -를 붙여서 내림차순으로 정렬할 수 있다.
arr.sortWith(compareBy { -it.length })























